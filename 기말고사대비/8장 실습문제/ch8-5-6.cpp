#include <iostream>
#include <string>
using namespace std;

class BaseArray {
private:
	int capacity;
	int* mem;
protected:
	BaseArray(int capacity = 100) {
		this->capacity = capacity;
		mem = new int[capacity];
	}
	~BaseArray() {
		delete[] mem;
	}

	void put(int index, int val) {
		mem[index] = val;
	}
	int get(int index) { return mem[index];}
	int getCapacity() { return capacity; }
};

class MyQueue : protected BaseArray {
private:
	int idx, deIdx, qSize;
public:
	MyQueue(int size) : BaseArray(size), idx(0), deIdx(0), qSize(0) {}
	void enqueue(int n) {
		if (qSize < getCapacity()) {
			put(idx, n);
			idx++;
			qSize++;
		}
		else {
			cout << "큐가 가득 찼습니다!" << endl;
		}
	}
	int capacity() {
		return getCapacity();
	}
	int length() {
		return qSize;
	}
	int dequeue() {
		if (qSize == 0) {
			cout << "큐가 비어 있습니다!" << endl;
			return -1; // 빈 큐에서 값을 제거하려 할 때
		}
		int res = get(deIdx);
		deIdx++;
		qSize--;
		return res;
	}
};

int main() {
	MyQueue mQ(100);
	int n;
	cout << "큐에 삽입할 5개의 정수를 입력하세요 >>";
	for (int i = 0; i < 5; i++) {
		cin >> n;
		mQ.enqueue(n);
	}
	cout << "큐의 용량:" << mQ.capacity() << ", 큐의 크기:" << mQ.length() << endl;
	cout << "큐의 원소를 순서대로 제거하여 출력한다 >>";
	while (mQ.length() != 0) {
		cout << mQ.dequeue() << " ";
	}
	cout << endl << "큐의 현재 크기 : " << mQ.length() << endl;
}
